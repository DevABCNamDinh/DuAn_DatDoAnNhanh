@using DuAn_DoAnNhanh.Data.Enum
@model IEnumerable<DuAn_DoAnNhanh.Data.Entities.Store>

<div class="search-container mb-4">
    <input type="text" id="searchInput" placeholder="Tìm kiếm cửa hàng..." class="form-control" />
</div>

<p>
    <a id="openModal" style="color: white; background-color: red; padding: 10px 20px; border-radius: 5px; text-decoration: none; cursor: pointer;">
        Thêm cửa hàng
    </a>
</p>

<!-- Modal tạo cửa hàng mới -->
<div id="storeModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body" id="storeModalBody">
                @await Component.InvokeAsync("StoreCreate", new { model = new DuAn_DoAnNhanh.Data.ViewModel.StoreViewModel() })
            </div>
        </div>
    </div>
</div>

@if (Model == null || !Model.Any())
{
    <div class="alert alert-warning" role="alert">
        Cửa hàng trống.
    </div>
}
else
{
    <div class="row" id="storeList">
        @foreach (var store in Model)
        {
            <div class="col-md-4 col-sm-6 mb-4 store-item">
                <div class="card card-custom bg-primary-custom">
                    <h5>@store.StoreName</h5>
                    <h6>@store.Address.NumberPhone</h6>
                    <hr />
                    <p>@store.Address.SpecificAddress</p>
                    <p>@store.Address.Ward, @store.Address.District, @store.Address.Province</p>
                    <hr />
                    @foreach (var user in store.Users)
                    {
                        if (user.Role == Role.Manager)
                        {
                            <span>Quản lý: @user.FullName | @user.Email</span>
                        }
                    }
                    <span class="my-2 badge bg-success">@store.Status</span>
                </div>
            </div>
        }
    </div>
}

<!-- Nút phân trang -->
<div class="pagination text-center mt-4">
    <span id="pageNumbers"></span>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            let itemsPerPage = 6;
            let currentPage = 1;
            let $storeItems = $(".store-item");
            let filteredItems = $storeItems;

            // Mở modal
            $("#openModal").click(function () {
                $("#storeModal").modal('show');
            });

            // AJAX submit form
            $(document).on("submit", "#store-form", function (e) {
                e.preventDefault();
                var form = $(this);
                $.ajax({
                    url: form.attr("action") || "/Store/CreateStore",
                    method: form.attr("method"),
                    data: form.serialize(),
                    success: function (result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            $("#storeModalBody").html(result);
                        }
                    },
                    error: function () {
                        alert("Đã xảy ra lỗi. Vui lòng thử lại sau.");
                    }
                });
            });

            function updatePagination() {
                let totalPages = Math.ceil(filteredItems.length / itemsPerPage);
                $storeItems.hide();
                filteredItems.hide();
                let start = (currentPage - 1) * itemsPerPage;
                let end = start + itemsPerPage;
                filteredItems.slice(start, end).fadeIn();

                $("#pageNumbers").html("");
                for (let i = 1; i <= totalPages; i++) {
                    const btn = $(`<button class="btn ${i === currentPage ? 'btn-primary' : 'btn-secondary'} page-btn mx-1" data-page="${i}">${i}</button>`);
                    $("#pageNumbers").append(btn);
                }
            }

            $("#searchInput").on("keyup", function () {
                const keyword = $(this).val().toLowerCase();

                filteredItems = $storeItems.filter(function () {
                    const storeName = $(this).find("h5").text().toLowerCase();
                    return storeName.indexOf(keyword) > -1;
                });

                currentPage = 1;
                updatePagination();
            });

            $(document).on("click", ".page-btn", function () {
                currentPage = parseInt($(this).data("page"));
                updatePagination();
            });

            updatePagination();
        });
    </script>
    <style>
        .card-custom {
            color: white;
            border-radius: 10px;
            padding: 20px;
            text-align: left;
        }

        .bg-primary-custom {
            background-color: #007bff;
        }

        .page-btn {
            min-width: 40px;
        }
    </style>
}
