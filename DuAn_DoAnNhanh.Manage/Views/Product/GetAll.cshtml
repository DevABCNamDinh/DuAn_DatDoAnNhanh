@model IEnumerable<DuAn_DoAnNhanh.Data.Entities.Product>

<div id="productModal" class="modal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body">
                @await Component.InvokeAsync("ProductCreate")
            </div>
        </div>
    </div>
</div>

<!-- Thêm script cho jQuery và Bootstrap -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<!-- CSS -->
<style>
    .delete-combo-btn {
        display: none;
    }

    .combo-card:hover .delete-combo-btn {
        display: inline-block;
    }

    input {
        width: 1070px;
        margin-right: 20px;
    }

    .badge-status {
        top: 0;
        left: 0;
        background-color: #28a745;
        color: white;
        padding: 5px 10px;
        font-size: 0.85rem;
        border-radius: 0 0 5px 0;
        position: absolute;
        z-index: 1;
    }

    .product-item[data-status='1'] .badge-status {
        background-color: #ffc107;
    }
</style>

<!-- Script xử lý -->
<script>

        window.changeProductStatus = function (productId) {
        $.ajax({
            url: '/Product/ChangeStatus/' + productId,
            type: 'POST',
            success: function (response) {
                if (response.success) {
                    location.reload();
                } else {
                    alert(response.message); // Thông báo khi bị chặn
                }
            },
            error: function (xhr) {
                if (xhr.status === 400 && xhr.responseJSON && xhr.responseJSON.message) {
                    alert(xhr.responseJSON.message); // Lỗi sản phẩm nằm trong combo
                } else {
                    alert("Đã xảy ra lỗi khi cập nhật trạng thái sản phẩm.");
                }
            }
        });
    }

    $(document).ready(function () {
        let currentPage = 1;
        const itemsPerPage = 6;

        // Hàm lọc sản phẩm theo trạng thái và tìm kiếm
        function filterProducts() {
            var status = $("#statusFilter").val().toString();
            var searchValue = $("#searchInput").val().toLowerCase();

            const $productItems = $('.product-item');

            // Lọc sản phẩm theo trạng thái và tìm kiếm
            const filteredItems = $productItems.filter(function () {
                var productStatus = $(this).data('status').toString();
                var productName = $(this).find(".card-title b").text().toLowerCase();
                return (status === "2" || productStatus === status) && productName.indexOf(searchValue) > -1;
            });

            // Hiển thị hoặc ẩn các sản phẩm dựa trên kết quả lọc
            $productItems.hide(); // Ẩn tất cả sản phẩm
            filteredItems.show(); // Hiển thị sản phẩm đã lọc

            // Sau khi lọc xong, gọi hàm phân trang
            showPage(currentPage, filteredItems);
        }

        // Hàm phân trang sản phẩm
        function showPage(page, filteredItems) {
            const totalPages = Math.ceil(filteredItems.length / itemsPerPage);

            // Đảm bảo không vượt quá số trang
            if (page < 1) page = 1;
            if (page > totalPages) page = totalPages;

            filteredItems.hide(); // Ẩn tất cả các sản phẩm đã lọc

            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            filteredItems.slice(startIndex, endIndex).fadeIn(); // Hiển thị các sản phẩm trên trang hiện tại

            // Cập nhật nút phân trang
            $("#pageNumbers").html('');
            for (let i = 1; i <= totalPages; i++) {
                const pageButton = $(`<button class="btn ${i === page ? 'btn-primary' : 'btn-secondary'} page-btn" data-page="${i}">${i}</button>`);
                $("#pageNumbers").append(pageButton);
            }
        }

        // Sự kiện thay đổi trạng thái lọc
        $("#statusFilter").change(function () {
            filterProducts();
        });

        // Sự kiện tìm kiếm
        $("#searchInput").on("keyup", function () {
            filterProducts();
        });

        // Sự kiện phân trang
        $(document).on('click', '.page-btn', function () {
            const selectedPage = parseInt($(this).data('page'));
            if (selectedPage) {
                currentPage = selectedPage;
                filterProducts(); // Lọc lại sản phẩm và phân trang lại
            }
        });

        // Sự kiện mở modal thêm sản phẩm
        $("#openModal").click(function () {
            $("#productModal").modal('show');
        });

        // Xử lý khi thêm sản phẩm
        $("#productForm").submit(function (event) {
            event.preventDefault(); // Ngăn chặn hành vi mặc định của form

            // Gửi dữ liệu đến server để thêm sản phẩm
            $.ajax({
                url: '/Product/Add', // Đường dẫn đến action thêm sản phẩm
                type: 'POST',
                data: $(this).serialize(), // Lấy dữ liệu từ form
                success: function (response) {
                    if (response.success) {
                        // Cập nhật lại danh sách sản phẩm
                        filterProducts();
                        $("#productModal").modal('hide'); // Đóng modal
                    } else {
                        alert(response.message); // Thông báo lỗi
                    }
                },
                error: function () {
                    alert("Đã xảy ra lỗi khi thêm sản phẩm.");
                }
            });
        });

        // Sự kiện mở modal sửa sản phẩm
        $(document).on('click', '[id^="openUpdateModal_"]', function () {
            var productId = $(this).attr("id").split("_")[1]; // Lấy ID sản phẩm từ ID của nút
            $("#productUpdateModal_" + productId).modal('show'); // Mở modal tương ứng
        });

        // Hiển thị trang đầu tiên khi tải trang
        filterProducts(); // Hiển thị sản phẩm theo trạng thái và tìm kiếm ngay khi tải trang
    });


</script>

<!DOCTYPE html>
<html lang="vi">
<body>

    <article>
        <!-- Thanh tìm kiếm -->
        <div class="row mb-3">
            <div class="col-md-12">
                <input type="text" id="searchInput" placeholder="Tìm kiếm sản phẩm..." class="form-control" />
            </div>
        </div>

        <!-- Dòng chứa nút thêm và lọc trạng thái -->
        <div class="d-flex justify-content-between mb-3">
            <div class="col-md-6">
                <a id="openModal" class="btn btn-danger">
                    Thêm sản phẩm
                </a>
            </div>
            <div>
                <select id="statusFilter" class="form-select">
                    <option value="2" selected>Tất cả trạng thái</option>
                    <option value="0">Đang bán</option>
                    <option value="1">Ngừng bán</option>                    
                </select>

            </div>
        </div>

        @if (Model == null || !Model.Any())
        {
            <div class="alert alert-warning" role="alert">
                Sản phẩm trống.
            </div>
        }
        else
        {
            <div class="row">
                @foreach (var product in Model)
                {
                    <div class="col-md-4 col-sm-6 mb-4 product-item" data-status="@((int)product.Status)">
                        <div class="card h-100 position-relative combo-card">
                            <!-- Hiển thị trạng thái -->
                            <span class="badge-status">
                                @(product.Status == 0 ? "Đang bán" : "Ngừng bán")
                            </span>

                            <!-- Nút X chuyển trạng thái -->
                            <a href="javascript:void(0);" class="btn btn-danger position-absolute top-0 end-0 m-2 delete-combo-btn"
                               title="Chuyển trạng thái sản phẩm" onclick="changeProductStatus('@product.ProductID')">
                                X
                            </a>

                            <img class="card-img-top" src="@product.ImageUrl" style="height: 200px; object-fit: cover;">
                            <div class="card-body">
                                <h4 class="card-title"><b>@product.ProductName</b></h4>
                                <h5>Đã bán: @product.Quantity</h5>
                                <h3 class="card-title" style="color: red;"><b>@product.Price.ToString("N0") đ</b></h3>

                                <a id="openUpdateModal_@product.ProductID" class="btn btn-primary">
                                    Sửa
                                </a>
                            </div>
                        </div>
                    </div>

                    <!-- Modal cập nhật -->
                    <div id="productUpdateModal_@product.ProductID" class="modal" tabindex="-1" role="dialog">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content overflow-auto">
                                <div class="modal-body">
                                    @await Component.InvokeAsync("ProductUpdate", new { idProduct = @product.ProductID })
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Modal xoá -->
                    <div id="productDeleteModal_@product.ProductID" class="modal" tabindex="-1" role="dialog">
                        <div class="modal-dialog modal-custom-height" role="document"></div>
                    </div>
                }
            </div>
        }

        <div id="pageNumbers" class="mt-3"></div>
    </article>

</body>
</html>
