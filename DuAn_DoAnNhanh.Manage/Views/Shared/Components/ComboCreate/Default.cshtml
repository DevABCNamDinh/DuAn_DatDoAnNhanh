@model DuAn_DoAnNhanh.Data.ViewModel.ComboCreateViewModel

<div class="form-container">
    <form asp-action="Create" asp-controller="Combo" method="post" enctype="multipart/form-data" class="combo-form" id="comboCreateForm">
        @if (!ViewContext.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in ViewContext.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <p>@error.ErrorMessage</p>
                }
            </div>
        }

        <div class="form-group">
            <label class="form-label">Tên Combo:</label>
            <input type="text" asp-for="ComboName" class="form-input" />
            <span asp-validation-for="ComboName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label class="form-label">Hình Ảnh:</label>
            <input type="file" asp-validation-for="ImageFile"  name="ImageFile" id="ImageFile" class="form-control" accept="image/*" />
            <span asp-validation-for="ImageFile" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label class="form-label">Mô Tả:</label>
            <textarea asp-for="Description" class="form-textarea"></textarea>
        </div>

        <div class="form-group">
            <label class="form-label product-selection-label">Chọn sản phẩm cho Combo <span id="productWarning" class="text-danger" style="display: none;">(ít nhất 2 sản phẩm)</span></label>
            @if (Model.AvailableProducts == null || !Model.AvailableProducts.Any())
            {
                <div class="alert alert-warning" role="alert">
                    Không có sản phẩm nào trong cửa hàng.
                </div>
            }
            else
            {
                <div class="product-selection" id="productList">
                    @for (int i = 0; i < Model.AvailableProducts.Count; i++)
                    {
                        var product = Model.AvailableProducts[i];
                        <div class="product-item">
                            <div class="card mb-4">
                                <div class="row g-0">
                                    <div class="col-md-8">
                                        <div class="card-body">
                                            <h5 class="card-title">@product.ProductName</h5>
                                            <h3 class="card-title" style="color: red;"><b>Giá: @product.Price.ToString("N0") đ</b></h3>
                                            <div class="form-check">
                                                <input type="checkbox" class="form-check-input product-checkbox"
                                                       name="SelectedProducts[@i].IsSelected"
                                                       value="true"
                                                       data-product-id="@product.ProductID" />
                                                <input type="hidden" name="SelectedProducts[@i].ProductID" value="@product.ProductID" />
                                                <label class="form-check-label">Chọn sản phẩm này</label>
                                            </div>
                                            <div class="quantity-input" style="display: none;">
                                                <label>Số lượng:</label>
                                                <input type="number"
                                                       name="SelectedProducts[@i].Quantity"
                                                       value="1"
                                                       min="1"
                                                       class="form-input quantity-field"
                                                       style="width: 60px;" />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <img src="@product.ImageUrl" class="img-fluid rounded-end" alt="@product.ProductName" style="height: 100%; object-fit: cover;" />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="pagination-controls">
                    <button type="button" id="prevPage" class="btn btn-secondary">Trang trước</button>
                    <span id="pageInfo"></span>
                    <button type="button" id="nextPage" class="btn btn-secondary">Trang sau</button>
                </div>
                <span asp-validation-for="SelectedProducts" class="text-danger"></span>
            }
        </div>

        <div class="text-center mt-3">
            <button type="submit" class="btn btn-success">Tạo Combo</button>
            <button type="button" id="cancelCombo" class="btn btn-danger">Hủy</button>
        </div>
    </form>
</div>

<style>
    .form-container {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        max-width: 1200px;
        margin: auto;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: bold;
        margin-bottom: 5px;
        display: block;
    }

    .form-input,
    .form-textarea,
    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
    }

    .form-textarea {
        height: 100px;
    }

    .form-button {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        background-color: #007bff;
        color: #fff;
        cursor: pointer;
        margin: 0 10px;
    }

        .form-button:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

        .form-button:hover:not(:disabled) {
            background-color: #0056b3;
        }

    .cancel-button {
        background-color: #dc3545;
    }

        .cancel-button:hover:not(:disabled) {
            background-color: #c82333;
        }

    .product-selection {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
    }

    .product-item {
        width: 100%;
        margin-bottom: 20px;
    }

    .card {
        border: 1px solid #dee2e6;
        transition: transform 0.2s;
    }

    .pagination-controls {
        text-align: center;
        margin-top: 20px;
    }

        .pagination-controls button {
            margin: 0 10px;
        }

    .text-danger {
        font-size: 16px; /* Tăng kích thước chữ */
        font-weight: bold; /* In đậm */
        color: red;
        margin-top: 5px;
        display: block;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const checkboxes = document.querySelectorAll('.product-checkbox');
        const productWarning = document.getElementById('productWarning');
        const productList = document.getElementById('productList');
        const prevPageButton = document.getElementById('prevPage');
        const nextPageButton = document.getElementById('nextPage');
        const pageInfo = document.getElementById('pageInfo');

        const itemsPerPage = 4;
        let currentPage = 1;
        const products = Array.from(productList.getElementsByClassName('product-item'));
        const totalPages = Math.ceil(products.length / itemsPerPage);

        function showPage(page) {
            const start = (page - 1) * itemsPerPage;
            const end = start + itemsPerPage;

            products.forEach((product, index) => {
                product.style.display = (index >= start && index < end) ? 'block' : 'none';
            });

            pageInfo.textContent = `Trang ${page} / ${totalPages}`;
            prevPageButton.disabled = page === 1;
            nextPageButton.disabled = page === totalPages;
        }
        showPage(currentPage);
        function updateProductWarning() {
            const checkedCount = document.querySelectorAll('.product-checkbox:checked').length;
            productWarning.style.display = checkedCount < 2 ? 'inline' : 'none';
        }

        prevPageButton.addEventListener('click', function () {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
            }
        });

        nextPageButton.addEventListener('click', function () {
            if (currentPage < totalPages) {
                currentPage++;
                showPage(currentPage);
            }
        });

        checkboxes.forEach(checkbox => {
            checkbox.addEventListener('change', function () {
                const quantityDiv = this.closest('.card-body').querySelector('.quantity-input');
                quantityDiv.style.display = this.checked ? 'block' : 'none';
                updateProductWarning();
            });
        });

        document.getElementById('cancelCombo').addEventListener('click', function () {
            const form = document.querySelector('.combo-form');
            form.reset();

            const fileInput = document.getElementById('ImageFile');
            if (fileInput) fileInput.value = '';

            const qtyFields = document.querySelectorAll('.quantity-input');
            qtyFields.forEach(div => {
                div.style.display = 'none';
                const input = div.querySelector('input[type="number"]');
                if (input) input.value = 1;
            });

            // Ẩn tất cả thông báo lỗi
    // $('.text-danger').hide();
    // $("#productWarning").hide();
    // Bỏ chọn tất cả checkbox
    const checkboxes = document.querySelectorAll('.product-checkbox');
    checkboxes.forEach(cb => cb.checked = false);

    // checkboxes.forEach(cb => cb.checked = false);

            // updateProductWarning();
            currentPage = 1;
             showPage(currentPage);
             const modal = document.getElementById('comboModal');
            if (modal) $(modal).modal('hide');
            // Reset validation thay vì ẩn thủ công
            $("#comboCreateForm").validate().resetForm();
        });

       

        // Validation cho form
          $(document).ready(function () {
       $("#comboCreateForm").validate({
    rules: {
        ComboName: {
            required: true,
            maxlength: 100,
            regex: "^\\s*\\S.*\\S\\s*$" // Kiểm tra không chỉ chứa khoảng trắng
        },
        ImageFile: {
            required: true
        }
    },
    messages: {
        ComboName: {
            required: "Vui lòng nhập tên combo.",
            maxlength: "Tên combo không được vượt quá 100 ký tự.",
            regex: "Tên combo không thể chỉ chứa khoảng trắng hoặc ký tự đặc biệt."
        },
        ImageFile: {
            required: "Vui lòng chọn hình ảnh cho combo."
        }
    },
            submitHandler: function (form) {
                const checkedCount = $('.product-checkbox:checked').length;
                if (checkedCount < 2) {
                    $("#productWarning").text("Vui lòng chọn ít nhất 2 sản phẩm để tạo combo.").show();
                    return false; // Ngăn gửi form
                }
                $("#productWarning").hide(); // Ẩn thông báo khi đủ điều kiện
                form.submit(); // Gửi form nếu hợp lệ
            }
        });

        // Cập nhật thông báo khi thay đổi checkbox
        $('.product-checkbox').on('change', function () {
            const checkedCount = $('.product-checkbox:checked').length;
            $("#productWarning").toggle(checkedCount < 2);
        });
    });
            // Thêm phương thức regex cho jQuery Validate
            $.validator.addMethod("regex", function (value, element, regexp) {
                const re = new RegExp(regexp);
                return this.optional(element) || re.test(value);
            }, "Invalid format.");
    });
</script>
@* @section Scripts {
    <script>

                document.addEventListener('DOMContentLoaded', function () {
            const checkboxes = document.querySelectorAll('.product-checkbox');
            const submitButton = document.getElementById('submitButton');

            function updateSubmitButton() {
                const checkedCount = document.querySelectorAll('.product-checkbox:checked').length;
                submitButton.disabled = checkedCount < 2;
            }

            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateSubmitButton);
            });

            updateSubmitButton();
        });


        (function() {
          var itemsPerPage = 4, currentPage = 1;
          var list = document.getElementById('productList');
          if (!list) return;
          var products = Array.from(list.children), totalPages = Math.ceil(products.length / itemsPerPage);

          function showPage(page) {
            products.forEach((el, idx) => el.style.display = (idx >= (page-1)*itemsPerPage && idx < page*itemsPerPage) ? 'block' : 'none');
            document.getElementById('pageInfo').textContent = `Trang ${page}/${totalPages}`;
            document.getElementById('prevPage').disabled = page===1;
            document.getElementById('nextPage').disabled = page===totalPages;
          }

          document.getElementById('prevPage').onclick = () => showPage(--currentPage);
          document.getElementById('nextPage').onclick = () => showPage(++currentPage);

          var submitBtn = document.getElementById('submitButton');
          list.addEventListener('change', e => {
            if (e.target.matches('.product-checkbox')) {
              var idx = e.target.dataset.index;
              var qtyDiv = list.querySelector(`.quantity-input[data-index='${idx}']`);
              qtyDiv.style.display = e.target.checked ? 'block' : 'none';
              var checkedCount = list.querySelectorAll('.product-checkbox:checked').length;
              submitBtn.disabled = checkedCount < 2;
            }
          });

          // Cancel button: đóng modal của parent
                    document.getElementById('cancelCombo').addEventListener('click', function () {
                      // Đặt lại form
                      document.querySelector('.combo-form').reset();

                      // Ẩn các trường số lượng
                      const quantityInputs = document.querySelectorAll('.quantity-input');
                      quantityInputs.forEach(q => q.style.display = 'none');

                      // Đóng modal
                      const modal = document.getElementById('comboModal');
                      if (modal) {
                          $(modal).modal('hide');
                      }
                  });
          showPage(currentPage);
        })();
    </script>
}
 *@